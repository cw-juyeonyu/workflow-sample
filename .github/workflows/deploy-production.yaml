name: Deploy production

on:
  release:
    types: [ published ]

jobs:
  deploy:
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Source Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.release.tag_name }}

      - name: Generate Container Tag
        run: |
          COMMIT_HASH_SHORT=$(git rev-parse --short HEAD)
          echo "CONTAINER_TAG=sha-$COMMIT_HASH_SHORT" >> $GITHUB_ENV

      - name: Copy container image
        env:
          SRC_CONTAINER_TAG: ${{ env.CONTAINER_TAG }}
          DST_CONTAINER_TAG: ${{ github.event.release.tag_name }}
        run: echo "Copy GitHub Container image [$SRC_CONTAINER_TAG, staging deployed] to GitHub Container image [$DST_CONTAINER_TAG]"

      - name: Copy container image
        env:
          SRC_CONTAINER_TAG: ${{ env.CONTAINER_TAG }}
          DST_CONTAINER_TAG: ${{ github.event.release.tag_name }}
        run: echo "Copy GitHub Container image [$SRC_CONTAINER_TAG, staging deployed] to ECR [$DST_CONTAINER_TAG, cso-prd]"

      - name: Deploy
        env:
          CONTAINER_TAG: ${{ github.event.release.tag_name }}
        run: echo "Deploy container image [$CONTAINER_TAG] to production environment"

      - name: Build Api Specs.
        run: |
          docker run --rm -v ${PWD}:/spec ghcr.io/redocly/cli bundle api-spec.yaml \
            --output /spec/openapi.json

      - name: Upload Api Specs. Assets to Release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              name: 'openapi.json',
              data: await fs.readFile('openapi.json'),
            });
